<html>

<head>
  <meta charset="utf-8">
  <title>Immutable Passport Demo</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>

<body>
  <div class="container w-75 p-3">
    <h1 class="mb-4">Immutable Passport Demo</h1>

    <div class="mb-3">
      <img src="https://docs.immutable.com/img/products/passport/passport_btn_signin_dark_small.svg" id="login"
        style="cursor: pointer" alt="Login">
      <button type="button" id="logout" class="btn btn-outline-danger ms-2">Logout</button>
    </div>

    <div class="mb-3">
      <button type="button" id="getUserInfo" class="btn btn-primary me-2">Get User Info</button>
      <button type="button" id="getAccessToken" class="btn btn-primary me-2">Get Access Token</button>
      <button type="button" id="getIdToken" class="btn btn-primary me-2">Get ID Token</button>
      <button type="button" id="getUserInfoAPI" class="btn btn-secondary me-2">Get User Info by API</button>
      <button type="button" id="clear" class="btn btn-outline-secondary">Clear</button>
    </div>

    <div class="form-group">
      <label for="txtResult" class="form-label">Results:</label>
      <textarea class="form-control" id="txtResult" rows="20" readonly></textarea>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/@imtbl/sdk@1.78.10/dist/index.browser.min.js"></script>
  <script>
    // Environment setup
    const passportEnv = '<%= passportConfig.env %>' === "MAINNET"
      ? immutable.config.Environment.PRODUCTION
      : immutable.config.Environment.SANDBOX;

    // Initialize Passport
    const passportInstance = new immutable.passport.Passport({
      baseConfig: {
        environment: passportEnv,
        publishableKey: '<%= passportConfig.publishable_key %>',
      },
      clientId: '<%= passportConfig.client_id %>',
      redirectUri: '<%= passportConfig.redirect_url %>',
      logoutRedirectUri: '<%= passportConfig.logout_url %>',
      logoutMode: 'redirect', // Fixed typo
      audience: 'platform_api',
      scope: 'openid offline_access email transact',
      popupOverlayOptions: {
        disableGenericPopupOverlay: false,
        disableBlockedPopupOverlay: false,
      }
    });

    // Helper to add results with timestamp
    function addResult(title, data) {
      const resultArea = document.getElementById("txtResult");
      const timestamp = new Date().toLocaleTimeString();
      const formattedData = typeof data === 'object' ? JSON.stringify(data, null, 2) : data;
      resultArea.value += `\n[${timestamp}] ${title}:\n${formattedData}\n`;
      resultArea.scrollTop = resultArea.scrollHeight;
    }

    // Passport functions
    async function passportLogin() {
      try {
        const passportProvider = passportInstance.connectEvm();
        const accounts = await passportProvider.request({ method: "eth_requestAccounts" });

        addResult('Login', 'Successful');
        addResult('Accounts', accounts);
      } catch (error) {
        console.error('Login error:', error);
        addResult('Login Error', error.message);
      }
    }

    async function passportLogout() {
      try {
        await passportInstance.logout();
        addResult('Logout', 'Successful');
      } catch (error) {
        console.error('Logout error:', error);
        addResult('Logout Error', error.message);
      }
    }

    async function getUserInfo() {
      try {
        const userProfile = await passportInstance.getUserInfo();
        const linkedAddresses = await passportInstance.getLinkedAddresses();

        addResult('User Profile', userProfile);
        addResult('Linked Addresses', linkedAddresses);
      } catch (error) {
        console.error('Get user info error:', error);
        addResult('Get User Info Error', error.message);
      }
    }

    async function getAccessToken() {
      try {
        const accessToken = await passportInstance.getAccessToken();
        addResult('Access Token', accessToken);
      } catch (error) {
        console.error('Get access token error:', error);
        addResult('Get Access Token Error', error.message);
      }
    }

    async function getIdToken() {
      try {
        const idToken = await passportInstance.getIdToken();
        addResult('ID Token', idToken);
      } catch (error) {
        console.error('Get ID token error:', error);
        addResult('Get ID Token Error', error.message);
      }
    }

    async function getUserInfoByAPI() {
      try {
        const accessToken = await passportInstance.getAccessToken();

        const response = await fetch('<%= passportConfig.base_url %>/passport-profile/v1/user/info', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${accessToken}`
          }
        });

        if (!response.ok) {
          throw new Error(`API request failed: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        addResult('User Info by API', result);
      } catch (error) {
        console.error('API error:', error);
        addResult('API Error', error.message);
      }
    }

    // Handle authentication callback
    window.addEventListener('load', function () {
      // Only call loginCallback if this is an authentication redirect
      const urlParams = new URLSearchParams(window.location.search);
      const hasAuthParams = urlParams.has('code') || urlParams.has('state') || urlParams.has('error');

      if (hasAuthParams || window.opener) {
        passportInstance.loginCallback();
      }
    });

    // Event listeners
    document.getElementById("login").addEventListener('click', passportLogin);
    document.getElementById("logout").addEventListener('click', passportLogout);
    document.getElementById("getUserInfo").addEventListener('click', getUserInfo);
    document.getElementById("getAccessToken").addEventListener('click', getAccessToken);
    document.getElementById("getIdToken").addEventListener('click', getIdToken);
    document.getElementById("getUserInfoAPI").addEventListener('click', getUserInfoByAPI);
    document.getElementById("clear").addEventListener('click', () => {
      document.getElementById("txtResult").value = '';
    });

  </script>

</body>

</html>